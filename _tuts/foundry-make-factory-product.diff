diff --git a/src/Factory/ProductFactory.php b/src/Factory/ProductFactory.php
new file mode 100644
index 0000000..d575c97
--- /dev/null
+++ b/src/Factory/ProductFactory.php
@@ -0,0 +1,50 @@
+<?php
+
+namespace App\Factory;
+
+use App\Entity\Product;
+use App\Repository\ProductRepository;
+use Zenstruck\Foundry\RepositoryProxy;
+use Zenstruck\Foundry\ModelFactory;
+use Zenstruck\Foundry\Proxy;
+
+/**
+ * @method static Product|Proxy createOne(array $attributes = [])
+ * @method static Product[]|Proxy[] createMany(int $number, $attributes = [])
+ * @method static Product|Proxy findOrCreate(array $attributes)
+ * @method static Product|Proxy random(array $attributes = [])
+ * @method static Product|Proxy randomOrCreate(array $attributes = [])
+ * @method static Product[]|Proxy[] randomSet(int $number, array $attributes = [])
+ * @method static Product[]|Proxy[] randomRange(int $min, int $max, array $attributes = [])
+ * @method static ProductRepository|RepositoryProxy repository()
+ * @method Product|Proxy create($attributes = [])
+ */
+final class ProductFactory extends ModelFactory
+{
+    public function __construct()
+    {
+        parent::__construct();
+
+        // TODO inject services if required (https://github.com/zenstruck/foundry#factories-as-services)
+    }
+
+    protected function getDefaults(): array
+    {
+        return [
+            // TODO add your default values here (https://github.com/zenstruck/foundry#model-factories)
+        ];
+    }
+
+    protected function initialize(): self
+    {
+        // see https://github.com/zenstruck/foundry#initialization
+        return $this
+            // ->afterInstantiate(function(Product $product) {})
+        ;
+    }
+
+    protected static function getClass(): string
+    {
+        return Product::class;
+    }
+}
